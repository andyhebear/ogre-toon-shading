// ----------------------------------------------------------
// Vertex programs
// ----------------------------------------------------------

vertex_program ToonShadingVP_hlsl hlsl
{
	source ToonShading.hlsl
	entry_point ToonShadingVS
	target vs_3_0

	default_params
	{
		param_named_auto worldMatrix world_matrix
		param_named_auto viewMatrix	view_matrix
		param_named_auto projMatrix	projection_matrix
	}
}

vertex_program ToonShadingVP unified
{
	delegate ToonShadingVP_hlsl
}

vertex_program SobelFilterVS_hlsl hlsl
{
    source SobelFilter.hlsl
    entry_point SobelFilterVS
    target vs_3_0

	default_params
    {
		param_named_auto worldViewProj worldviewproj_matrix
    }
}

vertex_program SobelFilterVS unified
{
	delegate SobelFilterVS_hlsl
}


// ----------------------------------------------------------
// Fragment programs
// ----------------------------------------------------------

fragment_program ToonShadingFP_hlsl hlsl
{
	source ToonShading.hlsl
	entry_point ToonShadingPS
	target ps_3_0

	default_params
	{
		param_named_auto lightPosition light_position 0

		param_named defaultColor float4 1.0f 1.0f 1.0f 1.0f
	}
}

fragment_program ToonShadingFP unified
{
	delegate ToonShadingFP_hlsl
}

fragment_program SobelFilterPS_hlsl hlsl
{
    source SobelFilter.hlsl
    entry_point SobelFilterPS
    target ps_3_0

	default_params
    {
		param_named_auto viewportWidth viewport_width
		param_named_auto viewportHeight viewport_height

		param_named thickness float 4.0f
		param_named threshold float 0.4f
    }
}

fragment_program SobelFilterPS unified
{
	delegate SobelFilterPS_hlsl
}


// ----------------------------------------------------------
// Materials
// ----------------------------------------------------------

material ToonShading
{
	technique
	{
		pass
		{
			vertex_program_ref ToonShadingVP
			{
			}

			fragment_program_ref ToonShadingFP
			{
				// Get default color from custom renderable param 1
				param_named_auto defaultColor custom 1
			}

			texture_unit
			{
				texture gradient.png
				filtering none
			}
		}
	}
}

material ToonShadingCompositor/EdgeFilter
{
	technique
	{
        pass
        {
			vertex_program_ref SobelFilterVS
			{
			}

            fragment_program_ref SobelFilterPS
            {
				// Get edge thickness from custom renderable param 1
				param_named_auto thickness custom 1

				// Get edge threshold from custom renderable param 2
				param_named_auto threshold custom 2
            }

			texture_unit
			{
			}
        }
	}
}


// ----------------------------------------------------------
// Compositor
// ----------------------------------------------------------

compositor ToonShadingCompositor
{
	technique
	{
		texture scene target_width target_height PF_R8G8B8

		target scene
		{
			input previous
		}

		target_output
		{
			input none

			pass render_quad
			{
				material ToonShadingCompositor/EdgeFilter
				input 0 scene
			}
		}
	}
}



