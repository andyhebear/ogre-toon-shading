/*
-----------------------------------------------------------------------------
Filename:    OgreApp.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "OgreApp.h"

//-------------------------------------------------------------------------------------
OgreApp::OgreApp(void)
{
}

//-------------------------------------------------------------------------------------
OgreApp::~OgreApp(void)
{
}

enum ShaderParam { SP_SHININESS = 1, SP_DIFFUSE, SP_SPECULAR };

//-------------------------------------------------------------------------------------
void OgreApp::createScene(void)
{
	// Create a basic point light with an offset
	Ogre::Light* light = mSceneMgr->createLight();
	light->setPosition(20, 40, 50);

	// Attach the light to a pivot node
	mLightPivot = mSceneMgr->getRootSceneNode()->createChildSceneNode();
	mLightPivot->attachObject(light);

	// Create our model, give it the shader material, and place it at the origin
	Ogre::Entity* head = mSceneMgr->createEntity("Head", "ogrehead.mesh");
	head->setMaterialName("ToonShading");
	mSceneMgr->getRootSceneNode()->attachObject(head);

	/* We set the same material for all parts of the head, but use custom shader parameters to set the
	colours for each part. */

	Ogre::SubEntity* sub;
        
	// Eyes
	sub = head->getSubEntity(0);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(35.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		0.3f,	0.3f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		0.6f,	0.6f,	1.0f));

	// Skin
	sub = head->getSubEntity(1);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(10.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(0.0f,		0.5f,	0.0f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(0.3f,		0.5f,	0.3f,	1.0f));

	// Earring
	sub = head->getSubEntity(2);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(25.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		1.0f,	0.0f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		1.0f,	0.7f,	1.0f));

	// Teeth
	sub = head->getSubEntity(3);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(20.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		1.0f,	0.7f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		1.0f,	1.0f,	1.0f));

	// Set our compositor (based on a sobel filter, in order to detect edges)
	Ogre::Viewport *viewPort = mCamera->getViewport();

	Ogre::CompositorManager::getSingleton().addCompositor(viewPort, "ToonShadingCompositor");
	Ogre::CompositorManager::getSingleton().setCompositorEnabled(viewPort, "ToonShadingCompositor", true);
}

//-------------------------------------------------------------------------------------
bool OgreApp::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
	// Make the light revolve around our model
	mLightPivot->yaw(Ogre::Degree(evt.timeSinceLastFrame * 30));

	return BaseApplication::frameRenderingQueued(evt);
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        OgreApp app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
