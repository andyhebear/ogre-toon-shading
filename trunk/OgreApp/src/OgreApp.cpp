/*
-----------------------------------------------------------------------------
Filename:    OgreApp.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "OgreApp.h"

#define DEFAULT_THICKNESS 1.4f
#define DEFAULT_THRESHOLD 0.4f

//-------------------------------------------------------------------------------------
OgreApp::OgreApp(void)
{
}

//-------------------------------------------------------------------------------------
OgreApp::~OgreApp(void)
{
	if ( mSobelListener ) delete mSobelListener;
}

OgreApp::SobelListener::SobelListener()
	: mThickness(DEFAULT_THICKNESS), mThreshold(DEFAULT_THRESHOLD) { }

void OgreApp::SobelListener::notifyMaterialRender(Ogre::uint32 pass_id, Ogre::MaterialPtr &mat)
{
	mat->getBestTechnique()->getPass(pass_id)->getFragmentProgramParameters()->setNamedConstant("thickness", mThickness);
	mat->getBestTechnique()->getPass(pass_id)->getFragmentProgramParameters()->setNamedConstant("threshold", mThreshold);
}

void OgreApp::SobelListener::setThickness(float thickness)
{
	mThickness = thickness;
}

float OgreApp::SobelListener::getThickness() const
{
	return mThickness;
}

void OgreApp::SobelListener::setThreshold(float threshold)
{
	mThreshold = threshold;
}

float OgreApp::SobelListener::getThreshold() const
{
	return mThreshold;
}

enum ShaderParam { SP_SHININESS = 1, SP_DIFFUSE, SP_SPECULAR };

//-------------------------------------------------------------------------------------
void OgreApp::createScene(void)
{
	// Create a basic point light with an offset
	Ogre::Light* light = mSceneMgr->createLight();
	light->setPosition(20, 80, 50);

	// Attach the light to a pivot node
	mLightPivot = mSceneMgr->getRootSceneNode()->createChildSceneNode();
	mLightPivot->attachObject(light);

	// Create our model, give it the shader material, and place it at the origin
	mHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");
	mSceneMgr->getRootSceneNode()->attachObject(mHead);

	/* We set the same material for all parts of the head, but use custom shader parameters to set the
	colours for each part. */

	Ogre::SubEntity* sub;
        
	// Eyes
	sub = mHead->getSubEntity(0);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(35.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		0.3f,	0.3f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		0.6f,	0.6f,	1.0f));

	// Skin
	sub = mHead->getSubEntity(1);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(10.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(0.0f,		0.5f,	0.0f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(0.3f,		0.5f,	0.3f,	1.0f));

	// Earring
	sub = mHead->getSubEntity(2);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(25.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		1.0f,	0.0f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		1.0f,	0.7f,	1.0f));

	// Teeth
	sub = mHead->getSubEntity(3);    
	sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(20.0f,	0.0f,	0.0f,	0.0f));
	sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		1.0f,	0.7f,	1.0f));
	sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		1.0f,	1.0f,	1.0f));

	mHead->setMaterialName("CelShading");

	// Set our compositor (based on a sobel filter, in order to detect edges)
	mViewport = mCamera->getViewport();

	Ogre::CompositorInstance* comp = 
		Ogre::CompositorManager::getSingleton().addCompositor(mViewport, "ToonShadingCompositor");

	mSobelListener = new SobelListener();
	comp->addListener(mSobelListener);

	Ogre::CompositorManager::getSingleton().setCompositorEnabled(mViewport, "ToonShadingCompositor", false);

	mTechniqueDetail->setParamValue(0, "BASIC CELSHADING");
	mCurrentTechnique = CELSHADING;
}

//-------------------------------------------------------------------------------------
void OgreApp::createFrameListener(void)
{
	BaseApplication::createFrameListener();

	Ogre::StringVector desc;
	desc.push_back("Current technique");

	mTechniqueDetail = mTrayMgr->createParamsPanel(OgreBites::TL_TOPLEFT, "TechniqueDetail", 480, desc);

	// Create a check box to toggle light movement
	mMoveLight = mTrayMgr->createCheckBox(OgreBites::TL_TOPLEFT, "MoveLight", "Stop/Resume light movement (Key 'L')");
	mMoveLight->setChecked(false);

	mThicknessSlider = mTrayMgr->createLongSlider(OgreBites::TL_NONE,
		"ThicknessSlider", "Thickness", 160, 100, 0.0f, 3.0f, 31);
	mThicknessSlider->setValue(DEFAULT_THICKNESS, false);
	mThicknessSlider->hide();

	mThresholdSlider = mTrayMgr->createLongSlider(OgreBites::TL_NONE,
		"ThresholdSlider", "Threshold", 160, 100, 0.0f, 1.0f, 11);
	mThresholdSlider->setValue(DEFAULT_THRESHOLD, false);	
	mThresholdSlider->hide();
}

//-------------------------------------------------------------------------------------
bool OgreApp::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
	// Make the light revolve around our model
	if (mMoveLight->isChecked()) mLightPivot->yaw(Ogre::Degree(evt.timeSinceLastFrame * 30));

	return BaseApplication::frameRenderingQueued(evt);
}

//-------------------------------------------------------------------------------------
bool OgreApp::keyPressed(const OIS::KeyEvent &arg)
{
	BaseApplication::keyPressed(arg);

	if (arg.key == OIS::KC_C)
	{
		Ogre::SubEntity* sub;

		switch (mCurrentTechnique)
		{
		case CELSHADING:

			// Eyes
			sub = mHead->getSubEntity(0);    
			sub->setCustomParameter(1,	Ogre::Vector4(1.0f,	0.0f, 0.0f,	0.0f));

			// Skin
			sub = mHead->getSubEntity(1);    
			sub->setCustomParameter(1,	Ogre::Vector4(0.0f,	1.0f, 0.0f,	0.0f));

			// Earring
			sub = mHead->getSubEntity(2);    
			sub->setCustomParameter(1,	Ogre::Vector4(1.0f,	1.0f, 0.0f,	0.0f));

			// Teeth
			sub = mHead->getSubEntity(3);    
			sub->setCustomParameter(1,	Ogre::Vector4(1.0f,	1.0f, 1.0f,	0.0f));

			mHead->setMaterialName("ToonShading");

			Ogre::CompositorManager::getSingleton().setCompositorEnabled(mViewport, "ToonShadingCompositor", true);

			mTechniqueDetail->setParamValue(0, "CELSHADING WITH POST-PROCESS EDGE DET.");
			mCurrentTechnique = SOBEL_FILTER;

			mTrayMgr->moveWidgetToTray(mThicknessSlider, OgreBites::TL_TOPLEFT);
			mTrayMgr->moveWidgetToTray(mThresholdSlider, OgreBites::TL_TOPLEFT);
			mThicknessSlider->show();
			mThresholdSlider->show();

			break;

		case SOBEL_FILTER:

			// Eyes
			sub = mHead->getSubEntity(0);    
			sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(35.0f,	0.0f,	0.0f,	0.0f));
			sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		0.3f,	0.3f,	1.0f));
			sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		0.6f,	0.6f,	1.0f));

			// Skin
			sub = mHead->getSubEntity(1);    
			sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(10.0f,	0.0f,	0.0f,	0.0f));
			sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(0.0f,		0.5f,	0.0f,	1.0f));
			sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(0.3f,		0.5f,	0.3f,	1.0f));

			// Earring
			sub = mHead->getSubEntity(2);    
			sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(25.0f,	0.0f,	0.0f,	0.0f));
			sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		1.0f,	0.0f,	1.0f));
			sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		1.0f,	0.7f,	1.0f));

			// Teeth
			sub = mHead->getSubEntity(3);    
			sub->setCustomParameter(SP_SHININESS,	Ogre::Vector4(20.0f,	0.0f,	0.0f,	0.0f));
			sub->setCustomParameter(SP_DIFFUSE,		Ogre::Vector4(1.0f,		1.0f,	0.7f,	1.0f));
			sub->setCustomParameter(SP_SPECULAR,	Ogre::Vector4(1.0f,		1.0f,	1.0f,	1.0f));

			mHead->setMaterialName("CelShading");

			Ogre::CompositorManager::getSingleton().setCompositorEnabled(mViewport, "ToonShadingCompositor", false);

			mTechniqueDetail->setParamValue(0, "BASIC CELSHADING");
			mCurrentTechnique = CELSHADING;

			mTrayMgr->moveWidgetToTray(mThicknessSlider, OgreBites::TL_NONE, 0);
			mTrayMgr->moveWidgetToTray(mThresholdSlider, OgreBites::TL_NONE, 0);
			mThicknessSlider->hide();
			mThresholdSlider->hide();

			break;
		}
	}
	else if (arg.key == OIS::KC_L)
	{
		mMoveLight->setChecked(!mMoveLight->isChecked());
	}

	return true;
}

//-------------------------------------------------------------------------------------
void OgreApp::sliderMoved(OgreBites::Slider* slider)
{
	if (slider == mThicknessSlider)
	{
		// Update thickness
		mSobelListener->setThickness(slider->getValue());
	}
	else if (slider == mThresholdSlider)
	{
		// Update threshold
		mSobelListener->setThreshold(slider->getValue());
	}
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        OgreApp app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
